<?php
/**
 * @var $block \MagoArab\CdnIntegration\Block\Adminhtml\System\Config\EnhancedUrlAnalyzer
 */
?>
<div class="actions actions-analyze-urls">
    <div class="analyze-buttons" style="margin-bottom: 10px;">
        <?= $block->getButtonHtml() ?>
        <?= $block->getAdvancedButtonHtml() ?>
        <button type="button" id="direct_paste_button" class="action-secondary">
            <?= __('Paste URLs Directly') ?>
        </button>
    </div>
    
    <div id="analyze-settings" style="display: none; margin: 10px 0; padding: 10px; background: #f9f9f9; border: 1px solid #e3e3e3;">
        <div class="field">
            <label for="store_url">
                <?= __('Store URL') ?>
                <span class="required">*</span>
            </label>
            <div class="control">
                <input type="text" id="store_url" value="<?= $block->escapeUrl($block->getStoreUrl()) ?>" 
                       class="input-text required-entry" style="width: 350px;">
            </div>
        </div>
        <div class="field" id="advanced-settings" style="margin-top: 10px; display: none;">
            <label for="max_pages">
                <?= __('Maximum pages to analyze') ?>
            </label>
            <div class="control">
                <input type="number" id="max_pages" value="5" min="1" max="20" class="input-text" style="width: 80px;">
                <div style="margin-top: 5px; font-size: 12px; color: #666;">
                    <?= __('More pages will find more URLs but will take longer to complete.') ?>
                </div>
            </div>
            
            <div style="margin-top: 10px;">
                <input type="checkbox" id="include_products" checked="checked">
                <label for="include_products">
                    <?= __('Include product images (recommended)') ?>
                </label>
                <div style="margin-top: 5px; font-size: 12px; color: #666;">
                    <?= __('This will analyze all product images, including those not visible on the homepage.') ?>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Direct URL paste area -->
    <div id="direct-paste-area" style="display: none; margin: 10px 0; padding: 10px; background: #f9f9f9; border: 1px solid #e3e3e3;">
        <div class="field">
            <label for="pasted_urls">
                <?= __('Paste URLs (one per line)') ?>
                <span class="required">*</span>
            </label>
            <div class="control">
                <textarea id="pasted_urls" class="input-text" rows="10" style="width: 100%;"></textarea>
            </div>
        </div>
        <div style="margin-top: 10px;">
            <button type="button" id="analyze_pasted_urls" class="action-primary">
                <?= __('Analyze Pasted URLs') ?>
            </button>
        </div>
    </div>
</div>

<div id="url-analyzer-results" style="display: none; margin-top: 20px;">
    <div class="results-header" style="padding: 12px 15px; background: #f8f8f8; border: 1px solid #ddd; border-bottom: none;">
        <h4 style="margin: 0;"><?= __('URLs Found') ?> <span id="url-count"></span></h4>
        <p style="margin: 5px 0 0;"><?= __('Select the URLs you want to serve via CDN:') ?></p>
        <div class="filter-actions" style="margin-top: 10px;">
            <input type="text" id="url-filter" placeholder="<?= __('Filter URLs...') ?>" 
                   style="width: 250px; padding: 5px;">
            <select id="url-type-filter" style="margin-left: 10px; padding: 5px; min-width: 120px;">
                <option value="all"><?= __('All Types') ?></option>
                <option value="js"><?= __('JavaScript (.js)') ?></option>
                <option value="css"><?= __('CSS (.css)') ?></option>
                <option value="images"><?= __('Images') ?></option>
                <option value="fonts"><?= __('Fonts') ?></option>
                <option value="other"><?= __('Other') ?></option>
            </select>
            <div class="filter-status" style="display: inline-block; margin-left: 15px; font-style: italic;"></div>
        </div>
    </div>
    
    <div class="url-list" style="max-height: 300px; overflow-y: auto; margin-bottom: 0; padding: 15px; background: #fff; border: 1px solid #ddd;"></div>
    
    <div class="url-actions" style="margin-top: 0; padding: 12px 15px; background: #f8f8f8; border: 1px solid #ddd; border-top: none;">
        <button type="button" id="select-all-urls" class="action-secondary"><?= __('Select All') ?></button>
        <button type="button" id="add-selected-urls" class="action-primary"><?= __('Add Selected URLs') ?></button>
        <?= $block->getUploadButtonHtml() ?>
    </div>
    
    <div id="upload-progress" style="margin-top: 10px; display: none;">
        <div class="progress-status" style="margin-bottom: 5px;"></div>
        <div class="progress-bar-container" style="height: 20px; background-color: #eee; border-radius: 2px;">
            <div class="progress-bar" style="height: 100%; width: 0; background-color: #5cb85c; border-radius: 2px;"></div>
        </div>
    </div>
    
    <div id="upload-result" style="margin-top: 10px; display: none;"></div>
</div>

<script>
require([
    'jquery',
    'Magento_Ui/js/modal/modal',
    'Magento_Ui/js/modal/confirm',
    'Magento_Ui/js/modal/alert',
    'mage/translate'
], function ($, modal, confirm, alert, $t) {
    'use strict';

    var isAdvancedAnalysis = false;
    
    // Toggle between different analysis modes
    $('#direct_paste_button').click(function() {
        $('#analyze-settings').hide();
        $('#direct-paste-area').show();
        $('#advanced-settings').hide();
    });
    
    $('#analyze_urls_button').click(function() {
        $('#direct-paste-area').hide();
        $('#analyze-settings').show();
        $('#advanced-settings').hide();
        isAdvancedAnalysis = false;
    });
    
    $('#advanced_analyze_button').click(function() {
        $('#direct-paste-area').hide();
        $('#analyze-settings').show();
        $('#advanced-settings').show();
        isAdvancedAnalysis = true;
    });
    
    // Initial state - show analyze settings
    $('#analyze-settings').show();
    $('#direct-paste-area').hide();
    
    // Prevent form submission when clicking buttons
    $(document).on('click', '#select-all-urls, #add-selected-urls, #upload-to-github', function(e) {
        e.preventDefault();
        e.stopPropagation();
        return false;
    });
    
    // Direct URL paste analysis
    $('#analyze_pasted_urls').click(function (event) {
        event.preventDefault();
        
        var pastedUrls = $('#pasted_urls').val();
        
        if (!pastedUrls) {
            alert({
                title: $t('Missing Information'),
                content: $t('Please paste URLs to analyze.')
            });
            return;
        }

        // Pre-process URLs to handle multi-line pastes with no separator
        pastedUrls = pastedUrls.replace(/https?:\/\//g, "\nhttps://");
        pastedUrls = pastedUrls.replace(/^[\n\r]+/, ""); // Remove leading empty lines
        
        $(this).prop('disabled', true);
        $(this).text($t('Analyzing...'));
        
        // Reset the results panel
        resetResults();

        $.ajax({
            url: '<?= $block->escapeJs($block->getDirectAnalysisUrl()) ?>',
            type: 'POST',
            dataType: 'json',
            data: {
                form_key: window.FORM_KEY,
                pasted_urls: pastedUrls
            },
            showLoader: true,
            success: function (response) {
                handleAnalysisResponse(response);
            },
            error: function (xhr, status, error) {
                alert({
                    title: $t('Error'),
                    content: $t('An error occurred while analyzing pasted URLs: ') + error
                });
                $('#url-analyzer-results').hide();
            },
            complete: function () {
                $('#analyze_pasted_urls').prop('disabled', false);
                $('#analyze_pasted_urls').text($t('Analyze Pasted URLs'));
            }
        });
    });
    
    // Advanced analyze with product images
    $('#advanced_analyze_button').click(function(event) {
        event.preventDefault();
        
        var storeUrl = $('#store_url').val();
        var maxPages = $('#max_pages').val();
        var includeProducts = $('#include_products').is(':checked');
        
        if (!storeUrl) {
            alert({
                title: $t('Missing Information'),
                content: $t('Store URL is required.')
            });
            return;
        }
        
        $(this).prop('disabled', true);
        $(this).text($t('Analyzing...'));
        
        // Reset the results panel
        resetResults();
        
        // Show loading message with details
        var loadingMsg = includeProducts ? 
            $t('Analyzing URLs and product images. This may take some time...') : 
            $t('Analyzing URLs. Please wait...');
            
        $('#url-analyzer-results').show();
        $('#url-analyzer-results .url-list').html('<div class="loading-message" style="text-align: center; padding: 20px;">' +
            '<p>' + loadingMsg + '</p>' +
            '<div class="spinner" style="margin:10px auto; width:40px; height:40px; border:4px solid #f3f3f3; border-radius:50%; border-top:4px solid #5cb85c; animation:spin 1s linear infinite;"></div>' +
            '</div>');
            
        // Add animation style
        $('head').append('<style>@keyframes spin {0% {transform: rotate(0deg);} 100% {transform: rotate(360deg);}}</style>');

        $.ajax({
            url: '<?= $block->escapeJs($block->getAdvancedAjaxUrl()) ?>',
            type: 'POST',
            dataType: 'json',
            data: {
                form_key: window.FORM_KEY,
                store_url: storeUrl,
                max_pages: maxPages,
                include_products: includeProducts ? 1 : 0
            },
            showLoader: false, // We have our own loader
            success: function (response) {
                handleAnalysisResponse(response);
            },
            error: function (xhr, status, error) {
                alert({
                    title: $t('Error'),
                    content: $t('An error occurred during advanced analysis: ') + error
                });
                $('#url-analyzer-results').hide();
            },
            complete: function () {
                $('#advanced_analyze_button').prop('disabled', false);
                $('#advanced_analyze_button').text($t('Deep Analyze (Multiple Pages)'));
            }
        });
    });
        
    // Function to handle analysis response - shared by all analysis methods
    function handleAnalysisResponse(response) {
        if (response.success) {
            // Show results section
            $('#url-analyzer-results').show();
            
            // Update URL count
            $('#url-count').text('(' + response.urls.length + ')');
            
            // Clear previous results
            $('#url-analyzer-results .url-list').empty();
            $('#upload-result').hide();
            $('#upload-progress').hide();
            
            // Add each URL as a checkbox with file type indicator
            if (response.urls && response.urls.length > 0) {
                // Group URLs by type for better organization
                var urlsByType = categorizeUrls(response.urls);
                
                // Create markup for each type
                $.each(urlsByType, function(type, urls) {
                    if (urls.length > 0) {
                        var typeLabel = getTypeLabel(type);
                        var typeIcon = getTypeIcon(type);
                        
                        var typeHeader = '<div class="url-type-header" data-type="' + type + '" style="padding: 8px; background: #f2f2f2; margin-top: 10px; cursor: pointer;">' +
                            typeIcon + ' <strong>' + typeLabel + '</strong> <span class="count">(' + urls.length + ')</span>' +
                            '<span class="toggle-indicator" style="float: right;">▼</span>' +
                            '</div>';
                        
                        var urlItems = '<div class="url-type-items" data-type="' + type + '">';
                        
                        $.each(urls, function(index, url) {
                            urlItems += '<div class="url-item" data-type="' + type + '" style="margin: 8px 0 8px 15px;">' +
                                '<label style="display: block; cursor: pointer; overflow: hidden; text-overflow: ellipsis;">' +
                                '<input type="checkbox" class="url-checkbox" value="' + url + '"> ' +
                                '<span class="url-path" style="margin-left: 5px;">' + url + '</span>' +
                                '</label>' +
                                '</div>';
                        });
                        
                        urlItems += '</div>';
                        
                        $('#url-analyzer-results .url-list').append(typeHeader + urlItems);
                    }
                });
                
                // Initialize filter functionality
                initializeFilters();
                
                // Make type headers collapsible
                $('.url-type-header').click(function() {
                    var type = $(this).data('type');
                    $('.url-type-items[data-type="' + type + '"]').toggle();
                    $(this).find('.toggle-indicator').text(
                        $('.url-type-items[data-type="' + type + '"]').is(':visible') ? '▼' : '►'
                    );
                });
            } else {
                $('#url-analyzer-results .url-list').html('<p>' + $t('No suitable URLs found.') + '</p>');
            }
        } else {
            alert({
                title: $t('Error'),
                content: response.message
            });
            $('#url-analyzer-results').hide();
        }
    }
    
    // Function to categorize URLs by type
    function categorizeUrls(urls) {
        var result = {
            'js': [],
            'css': [],
            'images': [],
            'fonts': [],
            'other': []
        };
        
        $.each(urls, function(index, url) {
            var extension = url.split('.').pop().split('?')[0].toLowerCase();
            
            if (extension === 'js') {
                result.js.push(url);
            } else if (extension === 'css') {
                result.css.push(url);
            } else if (['jpg', 'jpeg', 'png', 'gif', 'svg', 'webp'].indexOf(extension) !== -1) {
                result.images.push(url);
            } else if (['woff', 'woff2', 'ttf', 'eot', 'otf'].indexOf(extension) !== -1) {
                result.fonts.push(url);
            } else {
                result.other.push(url);
            }
        });
        
        return result;
    }
    
    // Function to get user-friendly type label
    function getTypeLabel(type) {
        switch (type) {
            case 'js': return $t('JavaScript Files');
            case 'css': return $t('CSS Files');
            case 'images': return $t('Image Files');
            case 'fonts': return $t('Font Files');
            case 'other': return $t('Other Files');
            default: return type;
        }
    }
    
    // Function to get icon for file type
    function getTypeIcon(type) {
        var icon = '';
        switch (type) {
            case 'js': 
                icon = '<span style="color: #f0db4f; font-size: 16px;">⚙</span>';
                break;
            case 'css': 
                icon = '<span style="color: #264de4; font-size: 16px;">📃</span>';
                break;
            case 'images': 
                icon = '<span style="color: #ff9800; font-size: 16px;">🖼️</span>';
                break;
            case 'fonts': 
                icon = '<span style="color: #607d8b; font-size: 16px;">🔠</span>';
                break;
            case 'other': 
                icon = '<span style="color: #9e9e9e; font-size: 16px;">📄</span>';
                break;
        }
        return icon;
    }
    
    function preprocessPastedUrls(text) {
        // Handle various input formats
        if (!text) return '';
        
        // Split by space, comma or newline
        let urls = text.split(/[\s,]+/);
        
        // Filter out empty entries and normalize
        urls = urls.filter(url => url.trim().length > 0)
                .map(url => {
                    // Check if it's a URL
                    if (url.match(/^https?:\/\//i)) {
                        return url.trim();
                    }
                    // Check if it starts with /static/ or /media/
                    else if (url.match(/^\/?(static|media)\//i)) {
                        return url.trim().replace(/^([^\/])/, '/$1'); // Ensure it starts with /
                    }
                    return url.trim();
                });
        
        // Join with newlines
        return urls.join('\n');
    }

    // Update the event handler to use this function
    $('#pasted_urls').on('paste', function() {
        // Use setTimeout to get the pasted content after the paste event completes
        setTimeout(function() {
            let pastedContent = $('#pasted_urls').val();
            $('#pasted_urls').val(preprocessPastedUrls(pastedContent));
        }, 100);
    });
    
    // Initialize URL filtering functionality
    function initializeFilters() {
        $('#url-filter, #url-type-filter').on('input change', function() {
            var searchText = $('#url-filter').val().toLowerCase();
            var selectedType = $('#url-type-filter').val();
            
            var visibleCount = 0;
            var totalCount = $('.url-item').length;
            
            // Show/hide URL items based on filters
            $('.url-item').each(function() {
                var urlText = $(this).find('.url-path').text().toLowerCase();
                var urlType = $(this).data('type');
                
                var matchesSearch = searchText === '' || urlText.indexOf(searchText) !== -1;
                var matchesType = selectedType === 'all' || (selectedType === urlType);
                
                if (matchesSearch && matchesType) {
                    $(this).show();
                    visibleCount++;
                } else {
                    $(this).hide();
                }
            });
            
            // Update headers visibility based on their children
            $('.url-type-header').each(function() {
                var type = $(this).data('type');
                var hasVisibleItems = $('.url-item[data-type="' + type + '"]:visible').length > 0;
                
                if (hasVisibleItems) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });
            
            // Update filter status
            $('.filter-status').text(
                $t('Showing %1 of %2 URLs').replace('%1', visibleCount).replace('%2', totalCount)
            );
        });
    }
    
    // Reset the results panel
    function resetResults() {
        $('#url-analyzer-results .url-list').empty();
        $('#upload-result').hide();
        $('#upload-progress').hide();
        $('.filter-status').text('');
        $('#url-count').text('');
        $('#url-filter').val('');
        $('#url-type-filter').val('all');
    }
    
    // Select All button
    $(document).on('click', '#select-all-urls', function(e) {
        e.preventDefault();
        var visibleCheckboxes = $('.url-item:visible input[type="checkbox"]');
        
        if (visibleCheckboxes.length > 0) {
            visibleCheckboxes.prop('checked', true);
        } else {
            alert({
                title: $t('Information'),
                content: $t('No visible URLs to select. Please adjust your filters.')
            });
        }
        return false;
    });
    
    // Add Selected URLs button
    $(document).on('click', '#add-selected-urls', function(e) {
        e.preventDefault();
        var selectedUrls = [];
        $('.url-item input[type="checkbox"]:checked').each(function() {
            selectedUrls.push($(this).val());
        });
        
        if (selectedUrls.length > 0) {
            // Get current textarea content
            var currentUrls = $('#magoarab_cdn_custom_urls_custom_url_list').val();
            
            // Add new URLs (ensure no duplicates)
            var existingUrls = currentUrls ? currentUrls.split("\n") : [];
            var newUrls = [];
            
            selectedUrls.forEach(function(url) {
                if (existingUrls.indexOf(url) === -1) {
                    newUrls.push(url);
                }
            });
            
            if (newUrls.length > 0) {
                var updatedUrls = currentUrls ? currentUrls + "\n" + newUrls.join("\n") : newUrls.join("\n");
                
                // Update textarea
                $('#magoarab_cdn_custom_urls_custom_url_list').val(updatedUrls);
                
                alert({
                    title: $t('Success'),
                    content: $t('Added %1 URLs to the custom URL list.').replace('%1', newUrls.length)
                });
            } else {
                alert({
                    title: $t('Information'),
                    content: $t('All selected URLs are already in the custom URL list.')
                });
            }
        } else {
            alert({
                title: $t('Information'),
                content: $t('Please select at least one URL.')
            });
        }
        return false;
    });
    
    // Upload to GitHub button
    $(document).on('click', '#upload-to-github', function(e) {
        e.preventDefault();
        
        var selectedUrls = [];
        $('.url-item input[type="checkbox"]:checked').each(function() {
            selectedUrls.push($(this).val());
        });
        
        if (selectedUrls.length > 0) {
            // Show confirmation dialog
            confirm({
                title: $t('Confirm Upload'),
                content: $t('Do you want to upload %1 selected files to GitHub?').replace('%1', selectedUrls.length),
                actions: {
                    confirm: function() {
                        // Disable button and show progress
                        $('#upload-to-github').prop('disabled', true);
                        $('#upload-to-github').text($t('Uploading...'));
                        
                        // Show progress indicator
                        $('#upload-progress').show();
                        $('#upload-progress .progress-status').text($t('Preparing files...'));
                        $('#upload-progress .progress-bar').css('width', '0%');
                        
                        // Perform the upload
                        $.ajax({
                            url: '<?= $block->escapeJs($block->getUploadUrl()) ?>',
                            type: 'POST',
                            dataType: 'json',
                            data: {
                                form_key: window.FORM_KEY,
                                urls: JSON.stringify(selectedUrls)
                            },
                            showLoader: false,
                            success: function(response) {
                                // Update progress to 100%
                                $('#upload-progress .progress-bar').css('width', '100%');
                                $('#upload-progress .progress-status').text($t('Upload completed'));
                                
                                if (response.success) {
                                    // Show upload results details
                                    var successMessage = response.message;
                                    
                                    if (response.results && response.results.details) {
                                        successMessage += '<br><br><strong>' + $t('Upload Details:') + '</strong><br>';
                                        successMessage += '<div style="max-height: 200px; overflow-y: auto; margin-top: 10px;">';
                                        successMessage += '<table class="data-table" style="width:100%">';
                                        successMessage += '<thead><tr>' +
                                            '<th>' + $t('URL') + '</th>' +
                                            '<th>' + $t('Status') + '</th>' +
                                            '</tr></thead><tbody>';
                                        
                                        $.each(response.results.details, function(index, detail) {
                                            var statusClass = detail.success ? 'success' : 'error';
                                            var statusText = detail.success ? '✓ ' + $t('Success') : '✗ ' + $t('Failed');
                                            var statusStyle = detail.success ? 'color:green;' : 'color:red;';
                                            
                                            successMessage += '<tr style="' + statusStyle + '">' +
                                                '<td>' + detail.url + '</td>' +
                                                '<td>' + statusText + '</td>' +
                                                '</tr>';
                                        });
                                        
                                        successMessage += '</tbody></table>';
                                        successMessage += '</div>';
                                    }

                                    // Display results directly in the UI
                                    $('#upload-result').html(successMessage).show();

                                    // Ask user if they want to add URLs to custom list
                                    confirm({
                                        title: $t('Upload Successful'),
                                        content: $t('Do you want to add these URLs to your custom URL list?'),
                                        actions: {
                                            confirm: function() {
                                                // Get successful URLs
                                                var successfulUrls = [];
                                                if (response.results && response.results.details) {
                                                    $.each(response.results.details, function(index, detail) {
                                                        if (detail.success) {
                                                            successfulUrls.push(detail.url);
                                                        }
                                                    });
                                                }
                                                
                                                // Add URLs to custom list
                                                var currentUrls = $('#magoarab_cdn_custom_urls_custom_url_list').val();
                                                
                                                // Add new URLs (ensure no duplicates)
                                                var existingUrls = currentUrls ? currentUrls.split("\n") : [];
                                                var newUrls = [];
                                                
                                                successfulUrls.forEach(function(url) {
                                                    if (existingUrls.indexOf(url) === -1) {
                                                        newUrls.push(url);
                                                    }
                                                });
                                                
                                                var updatedUrls = currentUrls ? currentUrls + "\n" + newUrls.join("\n") : newUrls.join("\n");
                                                
                                                // Update textarea
                                                $('#magoarab_cdn_custom_urls_custom_url_list').val(updatedUrls);
                                                
                                                alert({
                                                    title: $t('Success'),
                                                    content: $t('URLs added to custom list.')
                                                });
                                            }
                                        }
                                    });
                                } else {
                                    $('#upload-result').html('<div style="color: red; padding: 10px; background: #fff1f1; border: 1px solid #ffcaca;">' + 
                                        '<strong>' + $t('Error') + ':</strong> ' + response.message + '</div>').show();
                                    
                                    alert({
                                        title: $t('Error'),
                                        content: response.message
                                    });
                                }
                            },
                            error: function(xhr, status, error) {
                                $('#upload-progress .progress-status').text($t('Upload failed'));
                                
                                // Try to parse response for error message
                                var errorMsg = $t('An error occurred while uploading files to GitHub.');
                                try {
                                    if (xhr.responseText) {
                                        var jsonResponse = JSON.parse(xhr.responseText);
                                        if (jsonResponse.message) {
                                            errorMsg += '<br>' + jsonResponse.message;
                                        }
                                    }
                                } catch (e) {
                                    console.error('Failed to parse error response', e);
                                }
                                
                                $('#upload-result').html('<div style="color: red; padding: 10px; background: #fff1f1; border: 1px solid #ffcaca;">' + 
                                    '<strong>' + $t('Error') + ':</strong> ' + errorMsg + '</div>').show();
                                
                                alert({
                                    title: $t('Error'),
                                    content: errorMsg
                                });
                            },
                            complete: function() {
                                $('#upload-to-github').prop('disabled', false);
                                $('#upload-to-github').text($t('Upload to GitHub'));
                            }
                        });
                    }
                }
            });
        } else {
            alert({
                title: $t('Information'),
                content: $t('Please select at least one URL to upload.')
            });
        }
        return false;
    });
});